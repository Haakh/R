makeCacheMatrix <- function( x = matrix() ) {
  #Initializing inverse variable
  inv<- NULL
  
  #Function for setting matrix values
  set <- function( matrix ) {
    x <<- matrix  #global assignment "<<-"
    inv <<- NULL
  }
  
  #Function to get matrix values
  get <- function() {
    
    x  ## Return the matrix
  }
  
  #Function to set inverse of matrix
  setInverse <- function(inverse) {
    inv <<- inverse
  }
  
  #Function to get inverse of matrix
  getInverse <- function() {
    
    inv    #Return the inverse variable
  }
  
  #Returning the list for matrix values
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

#Function to calculate the inverse of the matrix got from makecachematrix() function
# We first check if there's already any inverse in the cache.
# if so return that value else calculate the inverse
cacheSolve <- function(x=matrix(), ...) {
  #Return a matrix that is the inverse of 'x'
  inv <- x$getInverse()
  
  ## Just return the inverse if its already set
  if( !is.null(inv) ) {
    message("getting cached data")
    return(inv)
  }
  
  
  matrix <- x$get()   # get the inverse matrix
  
  
  inv <- solve(matrix,...)# solve for the inverse
  
  
  x$setInverse(inv)  #cache the inverse matrixwe got
  
  
  inv  #return the inverse matrix
}
